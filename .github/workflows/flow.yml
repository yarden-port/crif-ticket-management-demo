name: Simulate External Ticket Lifecycle

on:
  workflow_dispatch:
    inputs:
      port_payload:
        required: true
        description: "Port event payload"
        type: string

jobs:
  simulate-ticket-lifecycle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate Port Access Token
        id: generate-token
        run: |
          access_token=$(curl --location --request POST 'https://api.getport.io/v1/auth/access_token' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "clientId": "'${{ secrets.PORT_CLIENT_ID }}'",
              "clientSecret": "'${{ secrets.PORT_CLIENT_SECRET }}'"
          }' | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Parse Ticket Payload
        id: parse-ticket
        run: |
          echo '${{ inputs.port_payload }}' > payload.json
          TYPE=$(jq -r '.diff.after.properties.type' payload.json)
          IDENTIFIER=$(jq -r '.diff.after.identifier' payload.json)
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          echo "IDENTIFIER=$IDENTIFIER" >> $GITHUB_ENV

      - name: Create External Ticket Entity
        run: |
          if [[ "${{ env.TYPE }}" == "Jira" ]]; then
            BLUEPRINT="jira_ticket"
            URL="https://jira.example.com/browse/${{ env.IDENTIFIER }}"
            BODY=$(jq -n \
              --arg id "${{ env.IDENTIFIER }}" \
              --arg url "$URL" \
              --arg ticket "${{ env.IDENTIFIER }}" \
              '{
                identifier: $id,
                title: "Jira Ticket Simulation",
                blueprint: "jira_ticket",
                properties: {
                  jira_project: "PORT",
                  jira_issue_type: "Task",
                  jira_ticket_id: $id,
                  jira_url: $url,
                  status: "Open"
                },
                relations: {
                  original_ticket: $ticket
                }
              }')

          elif [[ "${{ env.TYPE }}" == "SharePoint" ]]; then
            BLUEPRINT="sharepoint_ticket"
            URL="https://sharepoint.example.com/tickets/${{ env.IDENTIFIER }}"
            BODY=$(jq -n \
              --arg id "${{ env.IDENTIFIER }}" \
              --arg url "$URL" \
              --arg ticket "${{ env.IDENTIFIER }}" \
              '{
                identifier: $id,
                title: "SharePoint Ticket Simulation",
                blueprint: "sharepoint_ticket",
                properties: {
                  sharepoint_list: "IT Requests",
                  sharepoint_ticket_id: $id,
                  sharepoint_url: $url,
                  status: "Open"
                },
                relations: {
                  original_ticket: $ticket
                }
              }')

          else
            BLUEPRINT="other_ticket_system"
            BODY=$(jq -n \
              --arg id "${{ env.IDENTIFIER }}" \
              --arg ticket "${{ env.IDENTIFIER }}" \
              '{
                identifier: $id,
                title: "Other Ticket Simulation",
                blueprint: "other_ticket_system",
                properties: {
                  ticket_id: $id,
                  status: "Open"
                },
                relations: {
                  original_ticket: $ticket
                }
              }')
          fi

          echo "$BODY" > entity.json
          curl -s -X POST "https://api.getport.io/v1/blueprints/${BLUEPRINT}/entities" \
            -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @entity.json

          echo "BLUEPRINT=$BLUEPRINT" >> $GITHUB_ENV

      - name: Simulate Status: In Progress
        run: |
          sleep 30
          curl -s -X PATCH "https://api.getport.io/v1/blueprints/${{ env.BLUEPRINT }}/entities/${{ env.IDENTIFIER }}" \
            -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"properties": { "status": "In Progress" }}'

      - name: Simulate Status: Resolved
        run: |
          sleep 30
          curl -s -X PATCH "https://api.getport.io/v1/blueprints/${{ env.BLUEPRINT }}/entities/${{ env.IDENTIFIER }}" \
            -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"properties": { "status": "Resolved" }}'

      - name: Simulate Status: Closed
        run: |
          sleep 30
          curl -s -X PATCH "https://api.getport.io/v1/blueprints/${{ env.BLUEPRINT }}/entities/${{ env.IDENTIFIER }}" \
            -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"properties": { "status": "Closed" }}'
